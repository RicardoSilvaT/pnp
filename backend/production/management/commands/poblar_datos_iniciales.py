from django.core.management.base import BaseCommand
from production.models import (
    # Ubicaci√≥n
    Departamento, Provincia, Distrito,
    # Personas  
    Nacionalidad, TipoDocumento, TipoRequisitoria,
    # Delitos
    DelitoFuero, DelitoGeneral, DelitoEspecifico, DelitoSubtipo,
    # Estructura Policial
    DireccionPolicial, DireccionEspecializada, DivisionPolicial,
    DepartamentoPolicial, UnidadPolicial,
    # Armas
    CategoriaArma, TipoArma,
    # Judicial
    SituacionDetenido, Fiscalia
)
from django.db import transaction


class Command(BaseCommand):
    help = 'Poblar todas las tablas de referencia con datos iniciales completos'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limpiar',
            action='store_true',
            help='Limpiar datos existentes antes de cargar',
        )
        parser.add_argument(
            '--solo-ubicacion',
            action='store_true',
            help='Solo cargar datos de ubicaci√≥n geogr√°fica',
        )

    def handle(self, *args, **options):
        self.stdout.write('üöÄ Iniciando carga de datos iniciales completos...')
        
        try:
            with transaction.atomic():
                if options['limpiar']:
                    self.limpiar_datos()
                
                if options.get('solo_ubicacion'):
                    self.cargar_ubicaciones()
                else:
                    # Cargar todo
                    self.cargar_ubicaciones()
                    self.cargar_datos_personas()
                    self.cargar_estructura_policial()
                    self.cargar_armas()
                    self.cargar_datos_judiciales()
                
                self.mostrar_resumen_final()
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"‚ùå Error durante la carga: {e}")
            )
            raise

    def limpiar_datos(self):
        """Limpiar datos existentes"""
        self.stdout.write('üóëÔ∏è Limpiando datos existentes...')
        
        # Limpiar en orden reverso por FK
        TipoArma.objects.all().delete()
        CategoriaArma.objects.all().delete()
        Fiscalia.objects.all().delete()
        SituacionDetenido.objects.all().delete()
        UnidadPolicial.objects.all().delete()
        DepartamentoPolicial.objects.all().delete()
        DivisionPolicial.objects.all().delete()
        DireccionEspecializada.objects.all().delete()
        DireccionPolicial.objects.all().delete()
        TipoRequisitoria.objects.all().delete()
        TipoDocumento.objects.all().delete()
        Nacionalidad.objects.all().delete()
        Distrito.objects.all().delete()
        Provincia.objects.all().delete()
        Departamento.objects.all().delete()
            
        self.stdout.write('‚úÖ Datos limpiados')

    def cargar_ubicaciones(self):
        """Cargar departamentos, provincias y distritos del Per√∫"""
        self.stdout.write('üìç Cargando ubicaciones geogr√°ficas del Per√∫...')
        
        # Datos completos de ubicaci√≥n
        ubicaciones_data = [
            # (departamento, provincia, distrito)
            # AMAZONAS
            ('AMAZONAS', 'CHACHAPOYAS', 'CHACHAPOYAS'),
            ('AMAZONAS', 'BAGUA', 'BAGUA'),
            ('AMAZONAS', 'UTCUBAMBA', 'BAGUA GRANDE'),
            
            # √ÅNCASH
            ('√ÅNCASH', 'HUARAZ', 'HUARAZ'),
            ('√ÅNCASH', 'SANTA', 'CHIMBOTE'),
            ('√ÅNCASH', 'CASMA', 'CASMA'),
            
            # APUR√çMAC
            ('APUR√çMAC', 'ABANCAY', 'ABANCAY'),
            ('APUR√çMAC', 'ANDAHUAYLAS', 'ANDAHUAYLAS'),
            
            # AREQUIPA
            ('AREQUIPA', 'AREQUIPA', 'AREQUIPA'),
            ('AREQUIPA', 'AREQUIPA', 'ALTO SELVA ALEGRE'),
            ('AREQUIPA', 'AREQUIPA', 'CAYMA'),
            ('AREQUIPA', 'AREQUIPA', 'CHARACATO'),
            ('AREQUIPA', 'AREQUIPA', 'CHIGUATA'),
            ('AREQUIPA', 'AREQUIPA', 'JACOBO HUNTER'),
            ('AREQUIPA', 'AREQUIPA', 'LA JOYA'),
            ('AREQUIPA', 'AREQUIPA', 'MIRAFLORES'),
            ('AREQUIPA', 'AREQUIPA', 'MOLLEBAYA'),
            ('AREQUIPA', 'AREQUIPA', 'PAUCARPATA'),
            ('AREQUIPA', 'AREQUIPA', 'SACHACA'),
            ('AREQUIPA', 'AREQUIPA', 'SAN JUAN DE SIGUAS'),
            ('AREQUIPA', 'AREQUIPA', 'SAN JUAN DE TARUCANI'),
            ('AREQUIPA', 'AREQUIPA', 'SANTA ISABEL DE SIGUAS'),
            ('AREQUIPA', 'AREQUIPA', 'SANTA RITA DE SIGUAS'),
            ('AREQUIPA', 'AREQUIPA', 'SANTIAGO'),
            ('AREQUIPA', 'AREQUIPA', 'SOCABAYA'),
            ('AREQUIPA', 'AREQUIPA', 'TIABAYA'),
            ('AREQUIPA', 'AREQUIPA', 'UCHUMAYO'),
            ('AREQUIPA', 'AREQUIPA', 'VITOR'),
            ('AREQUIPA', 'CAMANA', 'CAMANA'),
            ('AREQUIPA', 'CARAVEL√ç', 'CARAVEL√ç'),
            ('AREQUIPA', 'CASTILLA', 'APLAO'),
            ('AREQUIPA', 'CAYLLOMA', 'CHIVAY'),
            ('AREQUIPA', 'ISLAY', 'MOLLENDO'),
            ('AREQUIPA', 'LA UNI√ìN', 'COTAHUASI'),
            
            # AYACUCHO
            ('AYACUCHO', 'HUAMANGA', 'AYACUCHO'),
            ('AYACUCHO', 'HUANTA', 'HUANTA'),
            
            # CAJAMARCA
            ('CAJAMARCA', 'CAJAMARCA', 'CAJAMARCA'),
            ('CAJAMARCA', 'JA√âN', 'JA√âN'),
            
            # CALLAO
            ('CALLAO', 'CALLAO', 'CALLAO'),
            ('CALLAO', 'CALLAO', 'BELLAVISTA'),
            ('CALLAO', 'CALLAO', 'LA PERLA'),
            ('CALLAO', 'CALLAO', 'LA PUNTA'),
            ('CALLAO', 'CALLAO', 'CARMEN DE LA LEGUA REYNOSO'),
            ('CALLAO', 'CALLAO', 'VENTANILLA'),
            
            # CUSCO
            ('CUSCO', 'CUSCO', 'CUSCO'),
            ('CUSCO', 'ACOMAYO', 'ACOMAYO'),
            ('CUSCO', 'ANTA', 'ANTA'),
            ('CUSCO', 'CALCA', 'CALCA'),
            ('CUSCO', 'CANAS', 'YANAOCA'),
            ('CUSCO', 'CHUMBIVILCAS', 'SANTO TOM√ÅS'),
            ('CUSCO', 'ESPINAR', 'ESPINAR'),
            ('CUSCO', 'LA CONVENCI√ìN', 'QUILLABAMBA'),
            ('CUSCO', 'PARURO', 'PARURO'),
            ('CUSCO', 'PAUCARTAMBO', 'PAUCARTAMBO'),
            ('CUSCO', 'QUISPICANCHI', 'URCOS'),
            ('CUSCO', 'URUBAMBA', 'URUBAMBA'),
            
            # HUANCAVELICA
            ('HUANCAVELICA', 'HUANCAVELICA', 'HUANCAVELICA'),
            
            # HU√ÅNUCO
            ('HU√ÅNUCO', 'HU√ÅNUCO', 'HU√ÅNUCO'),
            ('HU√ÅNUCO', 'LEONCIO PRADO', 'TINGO MAR√çA'),
            
            # ICA
            ('ICA', 'ICA', 'ICA'),
            ('ICA', 'CHINCHA', 'CHINCHA ALTA'),
            ('ICA', 'NAZCA', 'NAZCA'),
            ('ICA', 'PISCO', 'PISCO'),
            
            # JUN√çN
            ('JUN√çN', 'HUANCAYO', 'HUANCAYO'),
            ('JUN√çN', 'TARMA', 'TARMA'),
            ('JUN√çN', 'JAUJA', 'JAUJA'),
            
            # LA LIBERTAD
            ('LA LIBERTAD', 'TRUJILLO', 'TRUJILLO'),
            ('LA LIBERTAD', 'PACASMAYO', 'PACASMAYO'),
            ('LA LIBERTAD', 'CHEP√âN', 'CHEP√âN'),
            
            # LAMBAYEQUE
            ('LAMBAYEQUE', 'CHICLAYO', 'CHICLAYO'),
            ('LAMBAYEQUE', 'LAMBAYEQUE', 'LAMBAYEQUE'),
            ('LAMBAYEQUE', 'FERRE√ëAFE', 'FERRE√ëAFE'),
            
            # LIMA
            ('LIMA', 'LIMA', 'LIMA'),
            ('LIMA', 'LIMA', 'ANC√ìN'),
            ('LIMA', 'LIMA', 'ATE'),
            ('LIMA', 'LIMA', 'BARRANCO'),
            ('LIMA', 'LIMA', 'BRE√ëA'),
            ('LIMA', 'LIMA', 'CARABAYLLO'),
            ('LIMA', 'LIMA', 'CHACLACAYO'),
            ('LIMA', 'LIMA', 'CHORRILLOS'),
            ('LIMA', 'LIMA', 'CIENEGUILLA'),
            ('LIMA', 'LIMA', 'COMAS'),
            ('LIMA', 'LIMA', 'EL AGUSTINO'),
            ('LIMA', 'LIMA', 'INDEPENDENCIA'),
            ('LIMA', 'LIMA', 'JES√öS MAR√çA'),
            ('LIMA', 'LIMA', 'LA MOLINA'),
            ('LIMA', 'LIMA', 'LA VICTORIA'),
            ('LIMA', 'LIMA', 'LINCE'),
            ('LIMA', 'LIMA', 'LOS OLIVOS'),
            ('LIMA', 'LIMA', 'LURIGANCHO'),
            ('LIMA', 'LIMA', 'LUR√çN'),
            ('LIMA', 'LIMA', 'MAGDALENA DEL MAR'),
            ('LIMA', 'LIMA', 'MIRAFLORES'),
            ('LIMA', 'LIMA', 'PACHAC√ÅMAC'),
            ('LIMA', 'LIMA', 'PUCUSANA'),
            ('LIMA', 'LIMA', 'PUEBLO LIBRE'),
            ('LIMA', 'LIMA', 'PUENTE PIEDRA'),
            ('LIMA', 'LIMA', 'PUNTA HERMOSA'),
            ('LIMA', 'LIMA', 'PUNTA NEGRA'),
            ('LIMA', 'LIMA', 'R√çMAC'),
            ('LIMA', 'LIMA', 'SAN BARTOLO'),
            ('LIMA', 'LIMA', 'SAN BORJA'),
            ('LIMA', 'LIMA', 'SAN ISIDRO'),
            ('LIMA', 'LIMA', 'SAN JUAN DE LURIGANCHO'),
            ('LIMA', 'LIMA', 'SAN JUAN DE MIRAFLORES'),
            ('LIMA', 'LIMA', 'SAN LUIS'),
            ('LIMA', 'LIMA', 'SAN MART√çN DE PORRES'),
            ('LIMA', 'LIMA', 'SAN MIGUEL'),
            ('LIMA', 'LIMA', 'SANTA ANITA'),
            ('LIMA', 'LIMA', 'SANTA MAR√çA DEL MAR'),
            ('LIMA', 'LIMA', 'SANTA ROSA'),
            ('LIMA', 'LIMA', 'SANTIAGO DE SURCO'),
            ('LIMA', 'LIMA', 'SURQUILLO'),
            ('LIMA', 'LIMA', 'VILLA EL SALVADOR'),
            ('LIMA', 'LIMA', 'VILLA MAR√çA DEL TRIUNFO'),
            
            # LORETO
            ('LORETO', 'MAYNAS', 'IQUITOS'),
            ('LORETO', 'UCAYALI', 'CONTAMANA'),
            
            # MADRE DE DIOS
            ('MADRE DE DIOS', 'TAMBOPATA', 'PUERTO MALDONADO'),
            
            # MOQUEGUA
            ('MOQUEGUA', 'MARISCAL NIETO', 'MOQUEGUA'),
            ('MOQUEGUA', 'ILO', 'ILO'),
            
            # PASCO
            ('PASCO', 'PASCO', 'CERRO DE PASCO'),
            
            # PIURA
            ('PIURA', 'PIURA', 'PIURA'),
            ('PIURA', 'SULLANA', 'SULLANA'),
            ('PIURA', 'TALARA', 'TALARA'),
            
            # PUNO
            ('PUNO', 'PUNO', 'PUNO'),
            ('PUNO', 'SAN ROM√ÅN', 'JULIACA'),
            
            # SAN MART√çN
            ('SAN MART√çN', 'MOYOBAMBA', 'MOYOBAMBA'),
            ('SAN MART√çN', 'SAN MART√çN', 'TARAPOTO'),
            
            # TACNA
            ('TACNA', 'TACNA', 'TACNA'),
            
            # TUMBES
            ('TUMBES', 'TUMBES', 'TUMBES'),
            
            # UCAYALI
            ('UCAYALI', 'CORONEL PORTILLO', 'CALLER√çA'),
        ]
        
        departamentos_creados = {}
        provincias_creadas = {}
        
        for dep_nombre, prov_nombre, dist_nombre in ubicaciones_data:
            # Crear departamento
            if dep_nombre not in departamentos_creados:
                dep_obj, created = Departamento.objects.get_or_create(
                    nombre=dep_nombre,
                    defaults={'codigo': f'DEP{len(departamentos_creados) + 1:02d}'}
                )
                departamentos_creados[dep_nombre] = dep_obj
                if created:
                    self.stdout.write(f"‚úÖ Departamento: {dep_nombre}")
            
            # Crear provincia
            prov_key = f"{dep_nombre}|{prov_nombre}"
            if prov_key not in provincias_creadas:
                prov_obj, created = Provincia.objects.get_or_create(
                    departamento=departamentos_creados[dep_nombre],
                    nombre=prov_nombre,
                    defaults={'codigo': f'PROV{len(provincias_creadas) + 1:03d}'}
                )
                provincias_creadas[prov_key] = prov_obj
                if created:
                    self.stdout.write(f"  ‚úÖ Provincia: {prov_nombre}")
            
            # Crear distrito
            dist_obj, created = Distrito.objects.get_or_create(
                provincia=provincias_creadas[prov_key],
                nombre=dist_nombre,
                defaults={'codigo': f'DIST{Distrito.objects.count() + 1:04d}'}
            )
            if created:
                self.stdout.write(f"    ‚úÖ Distrito: {dist_nombre}")

    def cargar_datos_personas(self):
        """Cargar datos relacionados con personas"""
        self.stdout.write('üë§ Cargando datos de personas...')
        
        # Nacionalidades
        nacionalidades = [
            'ARGENTINO', 'BOLIVIANO', 'BRASILE√ëO', 'CHILENO', 'COLOMBIANO', 
            'COSTARRICENSE', 'CUBANO', 'ECUATORIANO', 'SALVADORE√ëO', 
            'GUATEMALTECO', 'HONDURE√ëO', 'MEXICANO', 'NICARAG√úENSE', 
            'PANAME√ëO', 'PARAGUAYO', 'PERUANO', 'DOMINICANO', 'URUGUAYO', 
            'VENEZOLANO', 'BELICE√ëO', 'GUAYAN√âS', 'SURINAM√âS'
        ]
        
        for nac in nacionalidades:
            obj, created = Nacionalidad.objects.get_or_create(
                nombre=nac,
                defaults={'codigo': f'NAC{Nacionalidad.objects.count() + 1:03d}'}
            )
            if created:
                self.stdout.write(f"‚úÖ Nacionalidad: {nac}")
        
        # Tipos de Documento
        tipos_documento = [
            'DNI', 'CARNET DE EXTRANJER√çA', 'C√âDULA DE IDENTIDAD', 
            'SDPV', 'SALVO CONDUCTO', 'LAISSER PASSER', 
            'PTP (PERMISO TEMPORAL DE PERMANENCIA)', 'PASAPORTE'
        ]
        
        for tipo in tipos_documento:
            obj, created = TipoDocumento.objects.get_or_create(
                nombre=tipo,
                defaults={'codigo': f'DOC{TipoDocumento.objects.count() + 1:03d}'}
            )
            if created:
                self.stdout.write(f"‚úÖ Tipo Documento: {tipo}")
        
        # Tipos de Requisitoria
        tipos_requisitoria = [
            'ORDEN DE CAPTURA', 'RQ INTERNACIONAL'
        ]
        
        for tipo in tipos_requisitoria:
            obj, created = TipoRequisitoria.objects.get_or_create(
                nombre=tipo,
                defaults={'descripcion': f'Tipo de requisitoria: {tipo}'}
            )
            if created:
                self.stdout.write(f"‚úÖ Tipo Requisitoria: {tipo}")

    def cargar_estructura_policial(self):
        """Cargar estructura policial completa"""
        self.stdout.write('üöî Cargando estructura policial...')
        
        # Direcciones Policiales principales
        direcciones_principales = [
            ('DIRNIC', 'Direcci√≥n Nacional de Investigaci√≥n Criminal'),
            ('DIRNOS', 'Direcci√≥n Nacional de Operaciones Especiales')
        ]
        
        direcciones_creadas = {}
        
        for sigla, nombre in direcciones_principales:
            dir_obj, created = DireccionPolicial.objects.get_or_create(
                sigla=sigla,
                defaults={'nombre': nombre}
            )
            direcciones_creadas[sigla] = dir_obj
            if created:
                self.stdout.write(f"‚úÖ Direcci√≥n: {sigla} - {nombre}")
        
        # Direcciones Especializadas DIRNIC
        direcciones_dirnic = [
            'DIRNCRI', 'DIRMEMB', 'DIRAD', 'DIRCOTER', 'DIRILA', 
            'DIRECTPIM', 'DIRCORCORT', 'DIRCOLFIS', 'DIVIAC', 
            'DIVIIIC-GRECCO', 'UNINIDIT', 'DIRCIBERD'
        ]
        
        for sigla in direcciones_dirnic:
            obj, created = DireccionEspecializada.objects.get_or_create(
                direccion_policial=direcciones_creadas['DIRNIC'],
                sigla=sigla,
                defaults={'nombre': f'Direcci√≥n Especializada {sigla}'}
            )
            if created:
                self.stdout.write(f"  ‚úÖ Dir. Especializada DIRNIC: {sigla}")
        
        # Direcciones Especializadas DIRNOS (Regiones Policiales)
        regiones_dirnos = [
            'RP PIURA', 'RP LAMBAYEQUE', 'RP LA LIBERTAD', 'RP LORETO', 
            'RP HUANUCO', 'RP JUNIN', 'RP PASCO', 'RP CUSCO', 'RP AREQUIPA', 
            'RP PUNO', 'RP SAN MARTIN', 'RP AMAZONAS', 'RP ANCASH', 
            'RP UCAYALI', 'RP TACNA', 'RP MOQUEGUA', 'RP MADRE DE DIOS'
        ]
        
        for sigla in regiones_dirnos:
            obj, created = DireccionEspecializada.objects.get_or_create(
                direccion_policial=direcciones_creadas['DIRNOS'],
                sigla=sigla,
                defaults={'nombre': f'Regi√≥n Policial {sigla.replace("RP ", "")}'}
            )
            if created:
                self.stdout.write(f"  ‚úÖ Dir. Especializada DIRNOS: {sigla}")
        
        # Divisiones Policiales
        divisiones = [
            ('DIVINCRI', 'Divisi√≥n de Investigaci√≥n Criminal'),
            ('DIVOPS', 'Divisi√≥n de Operaciones'),
            ('DIVPOCOM', 'Divisi√≥n de Polic√≠a Comunitaria')
        ]
        
        for sigla, nombre in divisiones:
            obj, created = DivisionPolicial.objects.get_or_create(
                sigla=sigla,
                defaults={'nombre': nombre}
            )
            if created:
                self.stdout.write(f"‚úÖ Divisi√≥n: {sigla} - {nombre}")
        
        # Departamentos Policiales
        departamentos_pol = [
            ('DUE', 'Departamento de Unidades Especiales'),
            ('DEPINCRI', 'Departamento de Investigaci√≥n Criminal'),
            ('DUR', 'Departamento de Unidades de Reserva'),
            ('.', 'Sin Departamento Espec√≠fico')  # Opci√≥n especial seg√∫n documento
        ]
        
        for sigla, nombre in departamentos_pol:
            obj, created = DepartamentoPolicial.objects.get_or_create(
                sigla=sigla,
                defaults={'nombre': nombre}
            )
            if created:
                self.stdout.write(f"‚úÖ Departamento: {sigla} - {nombre}")
        
        # Unidades Policiales (muestra de las principales de Arequipa)
        unidades_principales = [
            'COM. SANTA MARTA', 'COM. PALACIO VIEJO', 'COM. ALTO SELVA ALEGRE',
            'COM. INDEPENDENCIA', 'COM. CAYMA', 'COM. ACEQUIA ALTA',
            'COM. CASIMIRO CUADROS', 'COM. DEAN VALDIVIA', 'COM. CIUDAD MUNICIPAL',
            'COM. MARISCAL CASTILLA', 'COM. CERRO COLORADO', 'COM. ZAMACOLA',
            'COM. AEROPUERTO', 'COM. CHARACATO', 'COM. CHIGUATA', 'COM. HUNTER',
            'DIVINCRI DEPINCRI JEFATURA', 'HOMICIDIOS', 'ESTAFAS', 'SECUESTROS',
            'ROBOS', 'AREA REQUISITORIAS Y PODER JUDICIAL', 'AREA ANTIDROGAS'
        ]
        
        for unidad in unidades_principales:
            obj, created = UnidadPolicial.objects.get_or_create(
                nombre=unidad,
                defaults={'sigla': unidad[:20]}  # Primeros 20 caracteres como sigla
            )
            if created:
                self.stdout.write(f"‚úÖ Unidad: {unidad}")

    def cargar_armas(self):
        """Cargar categor√≠as y tipos de armas"""
        self.stdout.write('üî´ Cargando datos de armas...')
        
        # Categor√≠as de Armas
        categorias = [
            'ARMA DE FUEGO', 'ARMA BLANCA', 'OTROS', 'NINGUNA'
        ]
        
        categorias_creadas = {}
        
        for cat in categorias:
            obj, created = CategoriaArma.objects.get_or_create(
                nombre=cat,
                defaults={'descripcion': f'Categor√≠a: {cat}'}
            )
            categorias_creadas[cat] = obj
            if created:
                self.stdout.write(f"‚úÖ Categor√≠a Arma: {cat}")
        
        # Tipos de Armas por categor√≠a
        tipos_armas_data = [
            # (categoria, tipo_arma)
            ('ARMA BLANCA', 'ASTAS DE ANIMALES'),
            ('ARMA BLANCA', 'BISTURI'),
            ('ARMA BLANCA', 'CLAVO'),
            ('ARMA BLANCA', 'CORTA PLUMA'),
            ('ARMA BLANCA', 'CORTAFIERRO'),
            ('ARMA BLANCA', 'CUCHILLO'),
            ('ARMA BLANCA', 'DESTORNILLADOR'),
            ('ARMA BLANCA', 'ESPADA'),
            ('ARMA BLANCA', 'ESTILETE'),
            ('ARMA BLANCA', 'FRAGMENTO DE CHAPA'),
            ('ARMA BLANCA', 'FRAGMENTO DE METAL'),
            ('ARMA BLANCA', 'FRAGMENTO DE PORCELANA'),
            ('ARMA BLANCA', 'FRAGMENTO DE VIDRIO'),
            ('ARMA BLANCA', 'HACHA'),
            ('ARMA BLANCA', 'MACHETE'),
            ('ARMA BLANCA', 'NAVAJA'),
            ('ARMA BLANCA', 'PUNZON'),
            ('ARMA BLANCA', 'PU√ëAL'),
            ('ARMA BLANCA', 'SABLE'),
            ('ARMA BLANCA', 'SERRUCHO'),
            ('ARMA BLANCA', 'TORNILLO'),
            ('ARMA BLANCA', 'OTRAS (ESPECIFICAR)'),
            
            ('ARMA DE FUEGO', 'AMETRALLADORA'),
            ('ARMA DE FUEGO', 'CARABINA'),
            ('ARMA DE FUEGO', 'ESCOPETA'),
            ('ARMA DE FUEGO', 'FUSIL'),
            ('ARMA DE FUEGO', 'LANZAGRANADA'),
            ('ARMA DE FUEGO', 'MORTERO'),
            ('ARMA DE FUEGO', 'PISTOLA'),
            ('ARMA DE FUEGO', 'REVOLVER'),
            ('ARMA DE FUEGO', 'SUB-FUSIL O PISTOLA AMETRALLADORA'),
            ('ARMA DE FUEGO', 'ARMA DE FUEGO ARTESANAL'),
            ('ARMA DE FUEGO', 'ARMA DE FUEGO HECHIZA O CASERA'),
            
            ('OTROS', 'ARMA DE FOGUEO_DETONADORA'),
            ('OTROS', 'ARMA DE FOGUE_TRAUMATICA'),
            ('OTROS', 'ARMA DE AIRE (NEUMATICA/AIRE COMPRIMIDO)'),
            
            ('NINGUNA', 'NO SE INCAUTO ARMAS'),
        ]
        
        for categoria_nombre, tipo_nombre in tipos_armas_data:
            categoria_obj = categorias_creadas[categoria_nombre]
            obj, created = TipoArma.objects.get_or_create(
                categoria_arma=categoria_obj,
                nombre=tipo_nombre,
                defaults={'descripcion': f'Tipo de arma: {tipo_nombre}'}
            )
            if created:
                self.stdout.write(f"  ‚úÖ Tipo {categoria_nombre}: {tipo_nombre}")

    def cargar_datos_judiciales(self):
        """Cargar situaciones del detenido y fiscal√≠as"""
        self.stdout.write('‚öñÔ∏è Cargando datos judiciales...')
        
        # Situaciones del Detenido
        situaciones = [
            'LIBERTAD SEDE POLICIAL',
            'LIBERTAD SEDE FISCAL',
            'LIBERTAD SEDE JUDICIAL',
            'LIBERTAD CONDICIONAL',
            'PRIVADO DE SU LIBERTAD - ESTABLECIMIENTO PENITENCIARIO',
            'PRIVADO DE SU LIBERTAD - ESTABLECIMIENTO PENITENCIARIO (PRISI√ìN PREVENTIVA)',
            'CONTINUA DETENIDO',
            'PUESTO A DISPOSICI√ìN DE UNIDAD PNP',
            'PUESTO A DISPOSICI√ìN DE FISCAL√çA',
            'PUESTO A DISPOSICI√ìN DE JUZGADO'
        ]
        
        for situacion in situaciones:
            obj, created = SituacionDetenido.objects.get_or_create(
                nombre=situacion,
                defaults={'descripcion': f'Situaci√≥n procesal: {situacion}'}
            )
            if created:
                self.stdout.write(f"‚úÖ Situaci√≥n: {situacion}")
        
        # Fiscal√≠as principales del pa√≠s
        fiscalias_data = [
            ('FISCAL√çA PROVINCIAL PENAL DE LIMA', 'Lima'),
            ('FISCAL√çA PROVINCIAL PENAL DE AREQUIPA', 'Arequipa'),
            ('FISCAL√çA PROVINCIAL PENAL DE CUSCO', 'Cusco'),
            ('FISCAL√çA PROVINCIAL PENAL DE LA LIBERTAD', 'La Libertad'),
            ('FISCAL√çA PROVINCIAL PENAL DE PIURA', 'Piura'),
            ('FISCAL√çA PROVINCIAL PENAL DE LAMBAYEQUE', 'Lambayeque'),
            ('FISCAL√çA PROVINCIAL PENAL DE JUN√çN', 'Jun√≠n'),
            ('FISCAL√çA PROVINCIAL PENAL DE ICA', 'Ica'),
            ('FISCAL√çA PROVINCIAL PENAL DE ANCASH', 'Ancash'),
            ('FISCAL√çA PROVINCIAL PENAL DE CALLAO', 'Callao'),
            ('FISCAL√çA PROVINCIAL PENAL DE AYACUCHO', 'Ayacucho'),
            ('FISCAL√çA PROVINCIAL PENAL DE CAJAMARCA', 'Cajamarca'),
            ('FISCAL√çA PROVINCIAL PENAL DE HUANCAVELICA', 'Huancavelica'),
            ('FISCAL√çA PROVINCIAL PENAL DE HU√ÅNUCO', 'Hu√°nuco'),
            ('FISCAL√çA PROVINCIAL PENAL DE LORETO', 'Loreto'),
            ('FISCAL√çA PROVINCIAL PENAL DE MADRE DE DIOS', 'Madre de Dios'),
            ('FISCAL√çA PROVINCIAL PENAL DE MOQUEGUA', 'Moquegua'),
            ('FISCAL√çA PROVINCIAL PENAL DE PASCO', 'Pasco'),
            ('FISCAL√çA PROVINCIAL PENAL DE PUNO', 'Puno'),
            ('FISCAL√çA PROVINCIAL PENAL DE SAN MART√çN', 'San Mart√≠n'),
            ('FISCAL√çA PROVINCIAL PENAL DE TACNA', 'Tacna'),
            ('FISCAL√çA PROVINCIAL PENAL DE TUMBES', 'Tumbes'),
            ('FISCAL√çA PROVINCIAL PENAL DE UCAYALI', 'Ucayali'),
            ('FISCAL√çA ESPECIALIZADA EN DELITOS DE CORRUPCI√ìN DE FUNCIONARIOS', 'Lima'),
            ('FISCAL√çA ESPECIALIZADA EN DELITOS DE LAVADO DE ACTIVOS', 'Lima'),
            ('FISCAL√çA ESPECIALIZADA EN DELITOS AMBIENTALES', 'Lima'),
            ('FISCAL√çA ESPECIALIZADA EN DELITOS DE TR√ÅFICO IL√çCITO DE DROGAS', 'Lima'),
            ('FISCAL√çA ESPECIALIZADA EN DELITOS DE TERRORISMO', 'Lima'),
            ('FISCAL√çA ESPECIALIZADA EN DELITOS CONTRA LA LIBERTAD SEXUAL', 'Lima'),
            ('FISCAL√çA ESPECIALIZADA EN VIOLENCIA CONTRA LA MUJER', 'Lima'),
        ]
        
        # Obtener departamentos para asignar a fiscal√≠as
        departamentos = {dep.nombre: dep for dep in Departamento.objects.all()}
        
        for nombre_fiscalia, dep_nombre in fiscalias_data:
            departamento_obj = departamentos.get(dep_nombre.upper())
            obj, created = Fiscalia.objects.get_or_create(
                nombre=nombre_fiscalia,
                defaults={
                    'departamento': departamento_obj,
                    'direccion': f'Direcci√≥n de {nombre_fiscalia}',
                    'telefono': '01-1234567'  # Tel√©fono gen√©rico
                }
            )
            if created:
                self.stdout.write(f"‚úÖ Fiscal√≠a: {nombre_fiscalia}")

    def mostrar_resumen_final(self):
        """Mostrar resumen final de la carga"""
        self.stdout.write('\n' + '='*80)
        self.stdout.write(
            self.style.SUCCESS("üéâ ¬°Carga de datos iniciales completada exitosamente!")
        )
        self.stdout.write('\nüìä Resumen de carga:')
        
        # Ubicaci√≥n
        self.stdout.write('\nüìç UBICACI√ìN GEOGR√ÅFICA:')
        self.stdout.write(f"  ‚úÖ Departamentos: {Departamento.objects.count()}")
        self.stdout.write(f"  ‚úÖ Provincias: {Provincia.objects.count()}")
        self.stdout.write(f"  ‚úÖ Distritos: {Distrito.objects.count()}")
        
        # Personas
        self.stdout.write('\nüë§ DATOS DE PERSONAS:')
        self.stdout.write(f"  ‚úÖ Nacionalidades: {Nacionalidad.objects.count()}")
        self.stdout.write(f"  ‚úÖ Tipos de Documento: {TipoDocumento.objects.count()}")
        self.stdout.write(f"  ‚úÖ Tipos de Requisitoria: {TipoRequisitoria.objects.count()}")
        
        # Estructura Policial
        self.stdout.write('\nüöî ESTRUCTURA POLICIAL:')
        self.stdout.write(f"  ‚úÖ Direcciones Policiales: {DireccionPolicial.objects.count()}")
        self.stdout.write(f"  ‚úÖ Direcciones Especializadas: {DireccionEspecializada.objects.count()}")
        self.stdout.write(f"  ‚úÖ Divisiones Policiales: {DivisionPolicial.objects.count()}")
        self.stdout.write(f"  ‚úÖ Departamentos Policiales: {DepartamentoPolicial.objects.count()}")
        self.stdout.write(f"  ‚úÖ Unidades Policiales: {UnidadPolicial.objects.count()}")
        
        # Armas
        self.stdout.write('\nüî´ ARMAS:')
        self.stdout.write(f"  ‚úÖ Categor√≠as de Armas: {CategoriaArma.objects.count()}")
        self.stdout.write(f"  ‚úÖ Tipos de Armas: {TipoArma.objects.count()}")
        
        # Judicial
        self.stdout.write('\n‚öñÔ∏è DATOS JUDICIALES:')
        self.stdout.write(f"  ‚úÖ Situaciones del Detenido: {SituacionDetenido.objects.count()}")
        self.stdout.write(f"  ‚úÖ Fiscal√≠as: {Fiscalia.objects.count()}")
        
        # Total
        total_registros = (
            Departamento.objects.count() + Provincia.objects.count() + 
            Distrito.objects.count() + Nacionalidad.objects.count() + 
            TipoDocumento.objects.count() + TipoRequisitoria.objects.count() +
            DireccionPolicial.objects.count() + DireccionEspecializada.objects.count() +
            DivisionPolicial.objects.count() + DepartamentoPolicial.objects.count() +
            UnidadPolicial.objects.count() + CategoriaArma.objects.count() +
            TipoArma.objects.count() + SituacionDetenido.objects.count() +
            Fiscalia.objects.count()
        )
        
        self.stdout.write(f'\nüéØ TOTAL DE REGISTROS CREADOS: {total_registros}')
        self.stdout.write('\n‚úÖ ¬°Datos listos para usar en los formularios!')
        self.stdout.write('='*80)